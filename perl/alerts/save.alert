#!/usr/bin/perl -T
#
# Copyright (C) 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration
# (NASA).  All Rights Reserved.
#
# This software is distributed under the NASA Open Source Agreement
# (NOSA), version 1.3.  The NOSA has been approved by the Open Source
# Initiative.  See http://www.opensource.org/licenses/nasa1.3.php
# for the complete NOSA document.
#
# THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
# KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
# LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
# SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
# THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
# DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS
# AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY
# GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING
# DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING
# FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS
# ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF
# PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS".
#
# RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES
# GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR
# RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
# LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
# INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
# RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND
# HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED
# BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE
# IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.
#

use strict;
use Digest::HMAC_MD5 qw(hmac_md5_hex);
use Getopt::Long qw(:config bundling no_ignore_case require_order);
use Mail::Sendmail;
use Net::ARP;
use Net::Arping;
use Socket;
use Sys::Hostname;
use Sys::Syslog;
use XML::Simple;

our $VERSION = 0.30;

my $saverc = "/etc/saverc";

# parse options
my %opts = ();
my $rc = GetOptions(\%opts,
    "u", "O", "T",
    "l=i",
    "g=s", "h=s", "s=s", "t=s",
);
exit 1 if (!$rc || scalar(@ARGV) > 1);
$opts{host} = fqdn(hostname);

# parse saverc file
exit 1 if (! -r $saverc);
my $config0 = XMLin($saverc,
    ForceArray => [qw(file host)],
    KeyAttr => [],
    NormalizeSpace => 2,
) or exit 1;
my $config = $config0->{heartbeat};

# untaint path
$ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";

# initialize down file
my $down_file = $config->{statedir} . "/save.down";
if ($ARGV[0] eq 'down') {
    open(FILE, '>', $down_file);
    close FILE;
} elsif ($ARGV[0] eq 'up') {
    unlink $down_file;
    # always come back up in passive state
    $ARGV[0] = "passive";
}

my $down = 0;
if (-f $down_file) {
    # ignore given state if down
    $ARGV[0] = "passive";
    $down = 1;
}

if (scalar(@ARGV) == 0 && !$opts{O} && !$opts{T}) {
    # this only happens in save monitor alerts,
    # which are equivalent to trap timeouts
    $opts{O} = 1;
}

# initialize state file
my $addr = $config->{address};
$addr = $config->{address6} if (!$addr);
my $state_file = $config->{statedir} . "/save." . $addr;
my $old_state;
if (-l $state_file) {
    $old_state = readlink $state_file;
    # untaint old state
    $old_state = $old_state =~ /^((\w|\s)+)$/ ? $1 : exit 1;
} else {
    $old_state = "passive " . $config->{priority};
    unlink $state_file;
    symlink($old_state, $state_file);
}
if (scalar(@ARGV) == 1) {
    my $state = $old_state;
    # untaint and set tstate
    my $tstate = $ARGV[0] =~ /^((\w|\s)+)$/ ? $1 : exit 1;
    if ($tstate =~ /take|active/ && $state !~ /active/) {
        $state =~ s/^\w+/$tstate/;
    } elsif ($tstate =~ /give|passive/ && $state !~ /passive/) {
        $state =~ s/^\w+/$tstate/;
    }
    if ($state ne $old_state) {
        mylog("state set to $state" . ($down ? " (down)" : ""));
        unlink $state_file;
        symlink($state, $state_file);
    }
}

# exit if not trap or traptimeout
exit 0 if (!$opts{O} && !$opts{T});
exit 1 if (! -l $state_file);

# read time of last trap event
my $trap_file = $config->{statedir} . "/trap." . $addr;
my $last_trap = -l $trap_file ? readlink $trap_file : 0;

my $tstate = "give 00";
if ($opts{T}) {
    my @lines = <STDIN>;
    chomp @lines;
    splice(@lines, 1, 1);
    ($tstate, my $tip, my $ttime, my $tdigest) = @lines;
    # untaint tstate
    my $tstate = $tstate =~ /^((\w|\s)+)$/ ? $1 : exit 1;

    # authenticate message
    open(KEY, "<" . $config->{key}) or exit 1;
    my $key = <KEY>;
    close KEY;
    chomp $key;
    my $digest = hmac_md5_hex("$tstate $tip $ttime", pack("H*", $key));
    exit 1 if ($digest ne $tdigest);
    exit 1 if ($tip ne $addr || $ttime <= $last_trap);

    # record last time trap was received
    unlink $trap_file;
    symlink(time, $trap_file);
}

# transition to new state
my $state = $old_state;
if ($state =~ /give/ && $tstate =~ /active/) {
    $state =~ s/^\w+/passive/;
} elsif ($tstate =~ /take/) {
    $state =~ s/^\w+/give/ unless ($state =~ /take/ && $state gt $tstate);
} elsif ($tstate =~ /give/ && !$down) {
    # only become active if not down
    $state =~ s/^\w+/active/;
} elsif ($state =~ /active/ && $tstate =~ /active/) {
    $state =~ s/^\w+/take/;
}

# record new state
unlink $state_file;
symlink($state, $state_file);

# compare actual and perceived state
my $force = 0;
if ($state eq $old_state) {
    if ($config->{address}) {
        my $ips = qx(ip addr show dev $config->{device});
        if ($ips =~ /inet\s+\Q$config->{address}\E/) {
            if ($state =~ /passive/) {
                $force = 1;
                mylog("state is $state, but failover address found");
            }
        } else {
            if ($state =~ /active/) {
                $force = 1;
                mylog("state is $state, but failover address not found");
            }
        }

        # check failover mac is local mac if active
        if (!$force && $state =~ /active/) {
            my $mac = Net::ARP::get_mac($config->{device});
            my $ap = Net::Arping->new;
            my $apmac = $ap->arping(
                Host => $config->{address}, Interface => $config->{device});
            if ($apmac && $mac ne $apmac) {
                $force = 1;
                mylog("state is $state, but failover MAC address is $apmac");
            }
        }
    }

    if ($config->{address6} ) {
        my $ips = qx(ip addr show dev $config->{device6});
        if ($ips =~ /inet6\s+\Q$config->{address6}\E/) {
            if ($state =~ /passive/) {
                $force = 1;
                mylog("state is $state, but failover address found");
            }
        } else {
            if ($state =~ /active/) {
                $force = 1;
                mylog("state is $state, but failover address not found");
            }
        }
        #TODO: way to check ipv6 failover mac is local mac if active
    }
} else {
    $force = 1;
    my $msg = "state transition from $old_state to $state" .
        ($down ? " (down)" : "") . " [$opts{s}:$opts{g}]";
    mylog($msg);
    if ($state =~ /active/ && !$down && $config0->{log}->{email_failover}) {
        my $fqdn = fqdn($config->{address});
        $fqdn = $config->{address6} if (!$fqdn);
        Mail::Sendmail::sendmail(
            Smtp => 'localhost',
            From => "root\@$opts{host}",
            To => $config0->{log}->{email_failover},
            Subject => "Failover for alias $fqdn to host $opts{host}",
            Message => $msg,
        );
    }
    if ($state =~ /active/ && !$down && $config0->{log}->{command_failover}) {
        system($config0->{log}->{command_failover}, $msg);
    }
}

# make changes active
if ($force && $state =~ /active|passive/) {
    my $op = "del";
    if ($state =~ /active/) {
        $op = "add";
        my $mac = Net::ARP::get_mac($config->{device});
        for (1..5) {
            if ($config->{address}) {
                Net::ARP::send_packet($config->{device}, $config->{address},
                    $config->{address}, $mac, 'ff:ff:ff:ff:ff:ff', 'reply');
            }
            if ($config->{address6}) {
                system("ndsend", $config->{address6}, $config->{device6});
            }
        }
    }
    if ($config->{address}) {
        system("ip addr $op " . $config->{address} . "/" . $config->{prefix} .
            " dev " . $config->{device});
    }
    if ($config->{address6}) {
        system("ip -6 addr $op " . $config->{address6} . "/" .
            $config->{prefix6} . " dev " . $config->{device6});
    }
}

sub mylog {
    my $msg = shift;
    if ($config0->{log}->{email}) {
        Mail::Sendmail::sendmail(
            Smtp => 'localhost',
            From => "root\@$opts{host}",
            To => $config0->{log}->{email},
            Subject => $msg,
            Message => "",
        );
    }
    if ($config0->{log}->{syslog}) {
        my $facility = $config0->{syslog}->{facility};
        $facility = 'user' if (!$facility);
        openlog("save", 'pid', $facility);
        my $priority = $config0->{syslog}->{priority};
        $priority = 'info' if (!$priority);
        syslog($priority, $msg);
        closelog();
    }
    if ($config0->{log}->{command}) {
        system($config0->{log}->{command}, $msg);
    }
}

# return fully qualified version of given host name
sub fqdn {
    my $host = shift;
    if ($host =~ /^\d+\.\d+\.\d+\.\d+$/) {
        my $name = gethostbyaddr(inet_aton($host), AF_INET);
        return $name if ($name);
    } else {
        my @cols = gethostbyname($host);
        return $cols[0] if ($cols[0]);
    }
    return $host;
}

